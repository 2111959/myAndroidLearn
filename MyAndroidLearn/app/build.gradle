// 声明是Android程序，
//com.android.application 表示这是一个应用程序模块
//com.android.library 标识这是一个库模块
//而这区别：前者可以直接运行，后着是依附别的应用程序运行

apply plugin: 'com.android.application'

android {
    //设置编译时用的Android版本
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        //项目的包名
        applicationId rootProject.ext.android.applicationId
        //项目最低兼容的版本
        minSdkVersion rootProject.ext.android.minSdkVersion
        //项目的目标版本
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        //版本号
        versionCode rootProject.ext.android.versionCode
        //版本名称
        versionName rootProject.ext.android.versionName
        //表明要使用AndroidJUnitRunner进行单元测试
        testInstrumentationRunner rootProject.ext.android.testInstrumentationRunner
    }

//    signingConfigs {// 自动化打包配置
//        release {// 线上环境
//            keyAlias 'test'
//            keyPassword '123456'
//            storeFile file('test.keystore')
//            storePassword '123456'
//        }
//        debug {// 开发环境
//            keyAlias 'test'
//            keyPassword '123456'
//            storeFile file('test.keystore')
//            storePassword '123456'
//        }
//    }

    // 生产/测试环境配置
    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//        }
        release {// 生产环境
            buildConfigField("boolean", "LOG_DEBUG", "false")//配置Log日志
            buildConfigField("String", "URL_PERFIX", "\"https://release.cn/\"")// 配置URL前缀
            minifyEnabled false//是否对代码进行混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //指定混淆的规则文件
//            signingConfig signingConfigs.release//设置签名信息
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
//            pseudoLocalesEnabled false//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多
//            applicationIdSuffix 'test'//在applicationId 中添加了一个后缀，一般使用的不多
//            versionNameSuffix 'test'//在applicationId 中添加了一个后缀，一般使用的不多
        }
        debug {// 测试环境
            buildConfigField("boolean", "LOG_DEBUG", "true")//配置Log日志
            buildConfigField("String", "URL_PERFIX", "\"https://test.com/\"")// 配置URL前缀
            minifyEnabled false//是否对代码进行混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //指定混淆的规则文件
//            signingConfig signingConfigs.debug//设置签名信息
            debuggable false//是否支持断点调试
            jniDebuggable false//是否可以调试NDK代码
            renderscriptDebuggable false//是否开启渲染脚本就是一些c写的渲染方法
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
//            pseudoLocalesEnabled false//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多
//            applicationIdSuffix 'test'//在applicationId 中添加了一个后缀，一般使用的不多
//            versionNameSuffix 'test'//在applicationId 中添加了一个后缀，一般使用的不多
        }
    }

    sourceSets {//目录指向配置
        main {
            jniLibs.srcDirs = ['libs']//指定lib库目录
        }
    }

    //引用多个包将重复的文件剔除，比较常用的是通过exclude去除重复的文件
    packagingOptions {
        //pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk
        // 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错
        pickFirsts = ['META-INF/LICENSE']

        //merges何必 当出现重复文件时 合并重复的文件 然后打包入apk
        //这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加
        merge 'META-INF/LICENSE'

        //这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。
        //exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    //多个渠道配置
//    productFlavors {
//        wandoujia {
//            //豌豆荚渠道包配置
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
//            //manifestPlaceholders的使用在后续章节（AndroidManifest里的占位符）中介绍
//        }
//        xiaomi {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
//            applicationId "com.wiky.gradle.xiaomi" //配置包名
//
//        }
//        _360 {
//            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "_360"]
//        }
//    }

//    // 程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关
//    lintOptions {
//        // 即使报错也不会停止打包
//        abortOnError false
//        // 打包release版本的时候是否进行检测
//        checkReleaseBuilds false
//    }
//    //关闭Android Studio的PNG合法性检查
//    aaptOptions.cruncherEnabled = false
//    aaptOptions.useNewCruncher = false
//    // multiDex的一些相关配置，这样配置可以让你的编译速度更快
//    dexOptions {
//        // 让它不要对Lib做preDexing
//        preDexLibraries = false
//        // 开启incremental dexing,优化编译效率，这个功能android studio默认是关闭的。
//        incremental true
//        javaMaxHeapSize "4g" // 增加java堆内存大小
//    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8

        targetCompatibility JavaVersion.VERSION_1_8

    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //引用module
    implementation project(":basemodule")
    //通过全局配置依赖库
    implementation rootProject.ext.androidDependencies.appcompat
    implementation rootProject.ext.androidDependencies.constraintlayout
    testImplementation rootProject.ext.androidDependencies.junit
    androidTestImplementation rootProject.ext.androidDependencies.androidxrunner
    androidTestImplementation rootProject.ext.androidDependencies.androidxespressocore

    implementation rootProject.ext.mvpDependencies.multidex
    implementation rootProject.ext.mvpDependencies.design
    implementation rootProject.ext.mvpDependencies.supportannotations
    implementation rootProject.ext.mvpDependencies.gson
    implementation rootProject.ext.mvpDependencies.rxjava2
    implementation rootProject.ext.mvpDependencies.rxbinding2
    implementation rootProject.ext.mvpDependencies.rxbinding2supportv4
    implementation rootProject.ext.mvpDependencies.rxbinding2appcompatv7
    implementation rootProject.ext.mvpDependencies.rxbinding2design
    implementation rootProject.ext.mvpDependencies.rxlifecycle2
    implementation rootProject.ext.mvpDependencies.rxlifecycle2components
    implementation rootProject.ext.mvpDependencies.retrofit2retrofit
    implementation rootProject.ext.mvpDependencies.okhttp3logging
    implementation rootProject.ext.mvpDependencies.okhttp3okhttp
    implementation rootProject.ext.mvpDependencies.retrofit2converter
    implementation rootProject.ext.mvpDependencies.retrofit2adapter
    implementation rootProject.ext.mvpDependencies.rxpermissions2
    implementation rootProject.ext.mvpDependencies.barlibrary
    implementation rootProject.ext.mvpDependencies.butterknife
    implementation rootProject.ext.mvpDependencies.eventbus
    implementation rootProject.ext.mvpDependencies.glide

    annotationProcessor rootProject.ext.mvpDependencies.butterknifecompiler
    annotationProcessor rootProject.ext.mvpDependencies.glidecompiler
}
